# Example config for CI/CD between Heroku and Gitlab by </unchained

# Docker image container name to be used for all jobs.
# You can also redefine this for each job.
# List of different containers can be found here: https://hub.docker.com
image: node:latest

# Specify files and folder to be shared between all jobs
# More information to be found here: https://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  paths:
    - node_modules/

# Define scripts to be run before all jobs
# More information to be found here: https://docs.gitlab.com/ce/ci/yaml/README.html#before_script
before_script:
  - echo "Job `$CI_JOB_NAME` started."
  - # your scripts go here

# Define scripts to be run after all jobs
# More information to be found here: https://docs.gitlab.com/ce/ci/yaml/README.html#after_script
after_script:
  - echo "Job `$CI_JOB_NAME` ended."
  - # your scripts go here

# Define stages to be used by all jobs in certain order
# More information to be found here: https://docs.gitlab.com/ce/ci/yaml/README.html#stages
stages:
  - build
  - test
  - deploy

# Define job to build your application
# More information to be found here: https://docs.gitlab.com/ce/ci/yaml/README.html#jobs
build:
  type: build
  script:
    - npm install
    - # your scripts go here (ex.: gulp build, grunt build)
  # save files after build to be used for deployment
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    expire_in: 2 weeks
  # define branches and tags for which the job will run
  only:
    - master
    - staging
    - production

# Define job to test your application
# More information to be found here: https://docs.gitlab.com/ce/ci/yaml/README.html#jobs
test:
  type: test
  # Define which jobs has to be run before this one
  dependencies:
    - build
  script:
    - echo "Define test script in .gitlab-ci.yml first."

# Define job to deploy your application to development environment
# More information to be found here: https://docs.gitlab.com/ce/ci/yaml/README.html#jobs
deploy_development:
  type: deploy
  dependencies:
    - build
    - test
  # Define environment to keep track of what versions you deployed to different environments
  environment:
    name: development
    # Define URL address of your environment
    # Don't forget to define $APP_DOMAIN variable under Settings > CI/CD > Secret Variables on GitLab
    url: https://development.$APP_DOMAIN
  script:
    - apt-get update -qy
    - apt-get install -y ruby ruby-dev rubygems-integration
    - gem install dpl
    # Don't forget to define $HEROKU_DEVELOPMENT_APP and $HEROKU_DEVELOPMENT_API_KEY
    # variables under Settings > CI/CD > Secret Variables on GitLab
    - dpl --provider=heroku --app=$HEROKU_DEVELOPMENT_APP --api-key=$HEROKU_DEVELOPMENT_API_KEY --skip-cleanup
  only:
    - master

# Define job to deploy your application to staging environment
# More information to be found here: https://docs.gitlab.com/ce/ci/yaml/README.html#jobs
deploy_staging:
  type: deploy
  dependencies:
    - build
    - test
  environment:
    name: staging
    url: https://staging.$APP_DOMAIN
  script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
    # Don't forget to define $HEROKU_STAGING_APP and $HEROKU_STAGING_API_KEY
    # variables under Settings > CI/CD > Secret Variables on GitLab
    - dpl --provider=heroku --app=$HEROKU_STAGING_APP --api-key=$HEROKU_STAGING_API_KEY --skip-cleanup
  only:
    - staging

# Define job to deploy your application to production environment
# More information to be found here: https://docs.gitlab.com/ce/ci/yaml/README.html#jobs
deploy_production:
  type: deploy
  dependencies:
    - build
    - test
  environment:
    name: production
    url: https://$APP_DOMAIN
  script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
    # Don't forget to define $HEROKU_PRODUCTION_APP and $HEROKU_PRODUCTION_API_KEY
    # variables under Settings > CI/CD > Secret Variables on GitLab
    - dpl --provider=heroku --app=$HEROKU_PRODUCTION_APP --api-key=$HEROKU_PRODUCTION_API_KEY --skip-cleanup
  only:
  - production
